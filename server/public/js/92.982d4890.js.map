{"version":3,"file":"js/92.982d4890.js","mappings":"0GAIAA,EAAQ,EAAU,CAACC,EAAKC,KACpB,MAAMC,EAASF,EAAIG,WAAaH,EAChC,IAAK,MAAOI,EAAKC,KAAQJ,EACrBC,EAAOE,GAAOC,EAElB,OAAOH,CAAM,C,mRC2DXI,GAAQC,EAAAA,EAAAA,MAeRC,IAdQC,EAAAA,EAAAA,OACCC,EAAAA,EAAAA,OACEC,EAAAA,EAAAA,KAAI,IAQDC,EAAAA,EAAAA,KAAS,IAAMN,EAAMO,MAAMC,UAAUC,cAIzC,KACd,GACEd,EAAMe,KAAKC,WACXhB,EAAMe,KAAKE,YACXjB,EAAMe,KAAKG,YACXlB,EAAMe,KAAKI,WAGX,GAAwB,gBAApBnB,EAAMoB,UAA6B,CACrCf,EAAMgB,SAAS,iBAAkBrB,EAAMe,KAAKC,WAC5C,MAAMM,GAAQX,EAAAA,EAAAA,KAAS,IAAMN,EAAMO,MAAMW,MAAMD,QAG/CE,YAAW,KACT,GAC8B,IAA5BF,EAAMG,MAAMC,aACZJ,EAAMG,MAAMC,aAAe1B,EAAMe,KAAKE,WACtC,CACAZ,EAAMgB,SAAS,iBAAkBrB,EAAMe,MAEvC,IAAIY,EAAML,EAAMG,MAAMC,YAAc1B,EAAMe,KAAKE,WAC/CZ,EAAMgB,SAAS,gBAAiB,CAC9BM,IAAKA,EACLX,UAAWhB,EAAMe,KAAKC,WAE1B,MACEY,EAAAA,GAAAA,QAAmB,WAAUN,EAAMG,MAAMC,kBAC3C,GACC,IAEL,KAA+B,eAApB1B,EAAMoB,UACff,EAAMgB,SAAS,gBAAiBrB,EAAMe,MAEtCc,QAAQC,IAAI,gBAGdF,EAAAA,GAAAA,QAAkB,SAEpBG,EAAM,iBAAiB,EAAM,GAEzBC,EAAc,KAElBD,EAAM,iBAAiB,EAAM,E,urDC1H/B,MAAME,EAAc,EAEpB,O,yNCoDA,MAAMC,GAAWxB,EAAAA,EAAAA,IAAI,MACrB,IAAIyB,GAAWzB,EAAAA,EAAAA,KAAI,GACnB,MAAMU,GAAYV,EAAAA,EAAAA,IAAI,cACtB,IAAIK,GAAOqB,EAAAA,EAAAA,IAAS,CAClBpB,UAAW,KACXC,WAAY,EACZE,WAAY,KACZD,WAAY,IAEd,MAAMmB,GAAY1B,EAAAA,EAAAA,KAAS,IAAMN,EAAAA,EAAAA,MAAAA,MAAAA,YAG3BiC,EAAiBC,IACrBJ,EAASV,MAAQc,CAAG,EAIhBC,EAAa,CAACC,EAAOC,KACzB3B,EAAO2B,EAEPP,EAASV,OAAQ,CAAI,EAIjBkB,EAAe,CAACF,EAAOC,KAC3B,MAAME,EAAK,CAAEA,GAAIF,EAAIE,IACrBvC,EAAAA,EAAAA,SAAe,kBAAmBuC,EAAG,EAGjCC,EAAmBzC,IACnBA,EACFA,EAAI0C,SAASC,IACXb,EAAST,MAAMuB,mBAAmBD,OAAGE,EAAU,IAGjDf,EAAST,MAAMyB,gBACjB,EAGIC,EAAW,KAEf,IAAIC,EAAQ,GACZ,GAAiD,IAA7ClB,EAAST,MAAM4B,mBAAmBC,OAAc,CAClDpB,EAAST,MAAM4B,mBAAmBE,KAAKC,IACrCJ,EAAMK,KAAKD,EAAEZ,GAAG,IAElB,MAAMc,EAAY,CAAEd,GAAIQ,GACxB/C,EAAAA,EAAAA,SAAe,kBAAmBqD,EACpC,MACE7B,QAAQC,IAAI,MACd,EAGI6B,EAAmBvD,M,i+CCxGzB,MAAM6B,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://vj-admin/./node_modules/vue-loader/dist/exportHelper.js","webpack://vj-admin/./src/components/orderDialog/index.vue","webpack://vj-admin/./src/components/orderDialog/index.vue?a24c","webpack://vj-admin/./src/views/orders/orderList/orderTable/index.vue","webpack://vj-admin/./src/views/orders/orderList/orderTable/index.vue?ab65"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n","<template>\r\n  <el-dialog\r\n    :model-value=\"props.isDialog\"\r\n    title=\"编辑\"\r\n    width=\"32%\"\r\n    destroy-on-close\r\n    @before-close=\"beforeClose\"\r\n    @close=\"beforeClose\"\r\n    draggable\r\n  >\r\n    <el-form>\r\n      <el-form-item label=\"商品名称\">\r\n        <el-input\r\n          v-model=\"props.info.goodsName\"\r\n          autocomplete=\"off\"\r\n          style=\"width: 300px\"\r\n          placeholder=\"请输入名称\"\r\n        />\r\n      </el-form-item>\r\n      <el-form-item label=\"销售数量\">\r\n        <el-input-number v-model=\"props.info.saleNumber\" :step=\"1\" />\r\n      </el-form-item>\r\n      <el-form-item label=\"商品价格\">\r\n        <el-input-number\r\n          v-model=\"props.info.goodsPrice\"\r\n          :precision=\"2\"\r\n          :step=\"0.5\"\r\n        />\r\n      </el-form-item>\r\n      <el-form-item label=\"顾客姓名\">\r\n        <el-input\r\n          v-model=\"props.info.clientName\"\r\n          autocomplete=\"off\"\r\n          placeholder=\"请输入姓名\"\r\n        />\r\n      </el-form-item>\r\n    </el-form>\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <el-button @click=\"beforeClose\">取消</el-button>\r\n        <el-button\r\n          v-if=\"eventMark === 'orderTable'\"\r\n          type=\"primary\"\r\n          @click=\"confirm\"\r\n        >\r\n          更新\r\n        </el-button>\r\n        <el-button v-else type=\"primary\" @click=\"confirm\"> 添加 </el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {\r\n  ref,\r\n  reactive,\r\n  onMounted,\r\n  computed,\r\n  watch,\r\n  defineProps,\r\n  defineEmits\r\n} from 'vue'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport { useStore } from 'vuex'\r\nimport { ElMessage } from 'element-plus'\r\nimport storage from '@/utils/storage.js'\r\nconst emits = defineEmits(['isDialogOrder'])\r\nconst store = useStore()\r\nconst route = useRoute()\r\nconst router = useRouter()\r\nconst isDialog = ref(false)\r\n\r\nlet props = defineProps({\r\n  isDialog: Boolean,\r\n  info: Object,\r\n  eventMark: String\r\n})\r\n// const classList = computed(() => store.state.classes.classList)\r\nconst currentPage = computed(() => store.state.appSwitch.currentPage)\r\n// const stock = computed(() => store.state.order.stock)\r\n\r\n//弹框的确认按钮\r\nconst confirm = () => {\r\n  if (\r\n    props.info.goodsName &&\r\n    props.info.saleNumber &&\r\n    props.info.goodsPrice &&\r\n    props.info.clientName\r\n  ) {\r\n    //根据标识区分父组件\r\n    if (props.eventMark === 'orderHeader') {\r\n      store.dispatch('order/getStock', props.info.goodsName)\r\n      const stock = computed(() => store.state.order.stock)\r\n      // 点击添加按钮时，先按order商品名称去goods数据表中找出对应的商品的数量；\r\n      //然后，判断商品数量是否 > 销售数量。条件满足就放行，否则提示库存不足。\r\n      setTimeout(() => {\r\n        if (\r\n          stock.value.goodsNumber !== 0 &&\r\n          stock.value.goodsNumber >= props.info.saleNumber\r\n        ) {\r\n          store.dispatch('order/addOrder', props.info)\r\n          //更新goods\r\n          let num = stock.value.goodsNumber - props.info.saleNumber\r\n          store.dispatch('order/upStock', {\r\n            num: num,\r\n            goodsName: props.info.goodsName\r\n          })\r\n        } else {\r\n          ElMessage.warning(`库存不足！仅剩 ${stock.value.goodsNumber} 件商品`)\r\n        }\r\n      }, 500)\r\n      //\r\n    } else if (props.eventMark === 'orderTable') {\r\n      store.dispatch('order/upOrder', props.info)\r\n    } else {\r\n      console.log('未知的事件标识')\r\n    }\r\n  } else {\r\n    ElMessage.warning('请填写内容')\r\n  }\r\n  emits('isDialogOrder', false)\r\n}\r\nconst beforeClose = () => {\r\n  //关闭前的回调\r\n  emits('isDialogOrder', false)\r\n}\r\n// const close=()=>{\r\n//   //关闭的回调\r\n//   emits('isDialogGoods', false)\r\n// }\r\n//props是单向数据流，所以要关闭就要emit发送关闭信号给父组件,再让父组件传过来关闭信号！\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <el-table\r\n    ref=\"tableRef\"\r\n    :data=\"orderList\"\r\n    style=\"width: 100%\"\r\n    @selection-change=\"SelectionChange\"\r\n    :border=\"true\"\r\n    fit\r\n  >\r\n    <el-table-column type=\"selection\" width=\"55\" />\r\n    <el-table-column property=\"id\" label=\"ID\" width=\"70\" />\r\n    <el-table-column prop=\"saleDate\" label=\"出售日期\" show-overflow-tooltip />\r\n    <el-table-column prop=\"goodsName\" label=\"商品名称\" />\r\n    <el-table-column prop=\"goodsPrice\" label=\"商品价格\" />\r\n    <el-table-column prop=\"saleNumber\" label=\"销售数量\" />\r\n    <el-table-column prop=\"clientName\" label=\"顾客姓名\" />\r\n    <el-table-column label=\"操作\" width=\"150\">\r\n      <template #default=\"scope\">\r\n        <!--  -->\r\n        <el-icon\r\n          @click=\"handleEdit(scope.$index, scope.row)\"\r\n          style=\"margin: auto 18px auto 5px\"\r\n          ><EditPen\r\n        /></el-icon>\r\n        <el-popconfirm\r\n          title=\"确认要删除吗?\"\r\n          confirm-button-text=\"删除\"\r\n          cancel-button-text=\"取消\"\r\n          @confirm=\"handleDelete(scope.$index, scope.row)\"\r\n        >\r\n          <template #reference>\r\n            <el-icon><Delete /></el-icon>\r\n          </template>\r\n        </el-popconfirm>\r\n      </template>\r\n    </el-table-column>\r\n  </el-table>\r\n  <!-- 清空与批量删除 -->\r\n  <div style=\"margin-top: 10px; margin-left: 5px\">\r\n    <el-button @click=\"toggleSelection()\">清空</el-button>\r\n    <el-button @click=\"deleMore()\">批量删除</el-button>\r\n  </div>\r\n  <!-- 编辑弹框 -->\r\n  <orderDialog\r\n    :isDialog=\"isDialog\"\r\n    :info=\"info\"\r\n    :eventMark=\"eventMark\"\r\n    @isDialogOrder=\"isDialogOrder\"\r\n  ></orderDialog>\r\n</template>\r\n\r\n<script setup>\r\nimport orderDialog from '@/components/orderDialog/index.vue'\r\nimport store from '@/store'\r\nimport { ref, reactive, onMounted, computed, watch } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport dayjs from 'dayjs'\r\nconst tableRef = ref(null)\r\nlet isDialog = ref(false)\r\nconst eventMark = ref('orderTable') //传事件标识\r\nlet info = reactive({\r\n  goodsName: null,\r\n  saleNumber: 0,\r\n  clientName: null,\r\n  goodsPrice: 0\r\n})\r\nconst orderList = computed(() => store.state.order.orderList)\r\n\r\n//弹框\r\nconst isDialogOrder = (emi) => {\r\n  isDialog.value = emi\r\n}\r\n\r\n//1.编辑更新\r\nconst handleEdit = (index, row) => {\r\n  info = row\r\n  // console.log(info)\r\n  isDialog.value = true\r\n}\r\n\r\n//2.删除\r\nconst handleDelete = (index, row) => {\r\n  const id = { id: row.id }\r\n  store.dispatch('order/deleOrder', id)\r\n}\r\n//*清空\r\nconst toggleSelection = (val) => {\r\n  if (val) {\r\n    val.forEach((f) => {\r\n      tableRef.value.toggleRowSelection(f, undefined)\r\n    })\r\n  } else {\r\n    tableRef.value.clearSelection()\r\n  }\r\n}\r\n//*批量删除\r\nconst deleMore = () => {\r\n  // console.log(tableRef.value.getSelectionRows())\r\n  let idArr = []\r\n  if (tableRef.value.getSelectionRows().length !== 0) {\r\n    tableRef.value.getSelectionRows().map((m) => {\r\n      idArr.push(m.id)\r\n    })\r\n    const currentId = { id: idArr }\r\n    store.dispatch('order/deleOrder', currentId)\r\n  } else {\r\n    console.log('未选中')\r\n  }\r\n}\r\n//*监听并获取选中行的内容,以数组形式保存\r\nconst SelectionChange = (val) => {}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n//\r\n.el-table {\r\n  // box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);\r\n}\r\n//表格头部 行\r\n::v-deep .el-table__header {\r\n}\r\n//表头\r\n::v-deep th {\r\n  height: 42px;\r\n  background-color: #f5fafe !important;\r\n}\r\n//每一行\r\n::v-deep .el-table__row {\r\n  height: 43px;\r\n}\r\n.logInput {\r\n  width: 70%;\r\n  height: 30px;\r\n  padding: 7px;\r\n}\r\n</style>\r\n","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=4d697cf2&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\code\\\\x2-project\\\\VJ-Admin\\\\vj-admin\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4d697cf2\"]])\n\nexport default __exports__"],"names":["exports","sfc","props","target","__vccOpts","key","val","store","useStore","confirm","useRoute","useRouter","ref","computed","state","appSwitch","currentPage","info","goodsName","saleNumber","goodsPrice","clientName","eventMark","dispatch","stock","order","setTimeout","value","goodsNumber","num","ElMessage","console","log","emits","beforeClose","__exports__","tableRef","isDialog","reactive","orderList","isDialogOrder","emi","handleEdit","index","row","handleDelete","id","toggleSelection","forEach","f","toggleRowSelection","undefined","clearSelection","deleMore","idArr","getSelectionRows","length","map","m","push","currentId","SelectionChange"],"sourceRoot":""}